
  <style>
  body{
       background-image: url('/images/swirl_pattern.png');
       background-repeat:repeat;
     }
    .selected {
    fill: red;
  }

  .node {
    cursor: pointer;
  }

  .node circle {
    fill: #fff;
    stroke: steelblue;
    stroke-width: 1.5px;
  }

  .node text {
    font: 10px sans-serif;
  }

  .link {
    fill: none;
    stroke: #ccc;
    stroke-width: 1.5px;
  }
  #ui-id-1 li{
    margin-top: 9px;
  }
  </style>

<link rel="stylesheet" href="/styles/search.css">
<script src="/js/d3-min.js"></script>
<script src="/js/jquery-1.11.1.min.js"></script>

<script type="text/javascript" src="/js/defiant.js"></script>

 <!-- Fixed navbar -->
    <nav class="navbar navbar-default navbar-fixed-top" role="navigation">
      <div class="container">
        <div class="navbar-header">
          <a class="navbar-brand" href="/">Home</a>
        </div>
       <div class="search">
        <input type="text" class="form-control input" id="search2" onKeyPress="enterpressalert(event, this)" maxlength="64" placeholder="Search" />
         <button type="submit" class="btn btn-primary btn" onclick="searchNode()">Search</button>
        </div>
      </div>
    </nav>

<div class="container">

<!-- Output element -->
 <div class="row">
  <div class="col-md-12"><!-- Modal -->
            <div class="modal" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
              <div class="modal-dialog">
                <div class="modal-content">
                  <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><i class="text-danger fa fa-times"></i></button>
                    <h4 class="modal-title" id="myModalLabel"><i class="text-muted fa fa-shopping-cart"></i> <strong>Especie</strong> - Cheilanthes complanata</h4>
                  </div>
                  <div class="modal-body">
                  
                    <table class="pull-left col-md-8 ">
                         <tbody>
                             <tr>
                                 <td class="h6"><strong>Código</strong></td>
                                 <td> </td>
                                 <td class="h5">02051</td>
                             </tr>
                             
                             <tr>
                                 <td class="h6"><strong>Descripcion</strong></td>
                                 <td> </td>
                                 <td class="h5">Donec sed nibh dui.</td>
                             </tr>
                             
                             <tr>
                                 <td class="h6"><strong>Habitad</strong></td>
                                 <td> </td>
                                 <td class="h5">Nullam id nibh id nibh</td>
                             </tr>
                             
                             <tr>
                                 <td class="h6"><strong>Altura</strong></td>
                                 <td> </td>
                                 <td class="h5">1000</td>
                             </tr>
                         </tbody>
                    </table>
                             
                         
                    <div class="col-md-4"> 
                        <img src="/images/rsz_plantas-ornamentales1.png" alt="teste" class="img-thumbnail">  
                    </div>
                    
                    <div class="clearfix"></div>
                  </div>
                    
                  <div class="modal-footer">                            
                </div>
              </div>
            </div>
            </div></div>
</div>

<script type="text/javascript">
function enterpressalert(e, textarea){
var code = (e.keyCode ? e.keyCode : e.which);
if(code == 13) { //Enter keycode
  searchNode();
}
}
</script>
<script>
   /**
  $(function() {
 
    var data = [
    {"label" : "Aragorn"},
    {"label" : "Arwen"},
    {"label" : "Bilbo Baggins"},
    {"label" : "Boromir"},
    {"label" : "Frodo Baggins"},
    {"label" : "Gandalf"},
    {"label" : "Gimli"},
    {"label" : "Gollum"},
    {"label" : "Legolas"},
    {"label" : "Meriadoc Merry Brandybuck"},
    {"label" : "Peregrin Pippin Took"},
    {"label" : "Samwise Gamgee"}
    ];

var request = new XMLHttpRequest();
var graph;
request.open("GET", "../../json/Especie.json", false);
request.send(null);
request.onreadystatechange = function() {
  if ( request.readyState === 4 && request.status === 200 ) {
    graph = JSON.parse(request.responseText);
  }
}

var data2;
$.getJSON("/json/Especie.json", function(data) {
    console.log(data);
    //data2 = JSON.parse(data); 
    //data2 = JSON.(data); 
     $( "#search" ).autocomplete({
      source: data
    });
  });
});

   */
 </script>

<script>

var realWidth = window.innerWidth;
var realHeight = window.innerHeight;

var margin = {top: 20, right: 120, bottom: 20, left: 120},
    width = realWidth - margin.right - margin.left,
    height = realHeight - margin.top - margin.bottom;
    
var i = 0,
    duration = 750,
    root;

var tree = d3.layout.tree()
    .size([height, width]);

var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.y, d.x]; });

var svg = d3.select("body")
    .append("svg:svg")
    .attr("width", width + margin.right + margin.left)
    .attr("height", height + margin.top + margin.bottom)
    .attr("pointer-events", "all")
    .append('svg:g')
    .call(d3.behavior.zoom().on("zoom", redraw))
    .append('svg:g')
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    svg.append('svg:rect')
    .attr('width', width)
    .attr('height', height)
    .attr('fill', 'rgba(1,1,1,0)')

function redraw() {
//console.log("here", d3.event.translate, d3.event.scale);
svg.attr("transform","translate(" + d3.event.translate + ")" + " scale(" + d3.event.scale + ")"); } 

//var mis = '/json/Especie.json';
//var config = require('assets/json/Especie.json');

/*
var request = new XMLHttpRequest();
var graph;
request.open("GET", "../../json/Especie.json", false);
request.send(null);
request.onreadystatechange = function() {
  if ( request.readyState === 4 && request.status === 200 ) {
    graph = JSON.parse(request.responseText);
  }
}
*/
var data2 = [
    {"label" : "Aragorn"},
    {"label" : "Arwen"},
    {"label" : "Bilbo Baggins"},
    {"label" : "Boromir"},
    {"label" : "Frodo Baggins"},
    {"label" : "Gandalf"},
    {"label" : "Gimli"},
    {"label" : "Gollum"},
    {"label" : "Legolas"},
    {"label" : "Meriadoc Merry Brandybuck"},
    {"label" : "Peregrin Pippin Took"},
    {"label" : "Samwise Gamgee"}
    ];


//graph = JSON.parse(config);

//var mis = document.getElementById('mis').innerHTML;
 //graph = JSON.parse(mis);

d3.json("/json/Prueba3.json", function(error, flare) {
  root = flare;
  root.x0 = height / 2;
  root.y0 = 0;

function collapse(d) {
  if (d.children) {
    d._children = d.children;
    d._children.forEach(collapse);
    d.children = null;
  }
}

root.children.forEach(collapse);
update(root);
});

d3.select(self.frameElement).style("height", "1000px");

function update(source) {

  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse(),
      links = tree.links(nodes);

  // Normalize for fixed-depth.
  nodes.forEach(function(d) { d.y = d.depth * 180; });

  // Update the nodes…
  var node = svg.selectAll("g.node")
      .data(nodes, function(d) { return d.id || (d.id = ++i); });

  // Enter any new nodes at the parent's previous position.
  var nodeEnter = node.enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
      .on("click", click);
//6964FF
  nodeEnter.append("circle")
      .attr("r", 1e-6)
      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; })
      .style("stroke", function(d) { return d._children ? "#60B4F5" : "#60B4F5"; })
      .on("mouseover", function(){d3.select(this).style("stroke", "red");})
      .on("mouseout", function(d) {
       d3.select(this).style("stroke","#60B4F5");} );

  nodeEnter.append("text")
      .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
      .attr("dy", ".35em")
      .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
      .text(function(d) { return d.name; })
      .style("fill-opacity", 1e-6);

  // Transition nodes to their new position.
  var nodeUpdate = node.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

  nodeUpdate.select("circle")
      .attr("r", 4.5)
      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

  nodeUpdate.select("text")
      .style("fill-opacity", 1);

  // Transition exiting nodes to the parent's new position.
  var nodeExit = node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
      .remove();

  nodeExit.select("circle")
      .attr("r", 1e-6);

  nodeExit.select("text")
      .style("fill-opacity", 1e-6);

  // Update the links…
  var link = svg.selectAll("path.link")
      .data(links, function(d) { return d.target.id; });

  // Enter any new links at the parent's previous position.
  link.enter().insert("path", "g")
      .attr("class", "link")
      .style("stroke", function(d) { return d._children ? "#A48B8B" : "#A48B8B"; })
      .on("mouseover", function(){d3.select(this).style("stroke", "red");})
      .on("mouseout", function(d) {
       d3.select(this).style("stroke","#A48B8B");} )
      .attr("d", function(d) {
        var o = {x: source.x0, y: source.y0};
        return diagonal({source: o, target: o});
      });

  // Transition links to their new position.
  link.transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position.
  link.exit().transition()
      .duration(duration)
      .attr("d", function(d) {
        var o = {x: source.x, y: source.y};
        return diagonal({source: o, target: o});
      })
      .remove();

  // Stash the old positions for transition.
  nodes.forEach(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });
}

// Toggle children on click.
function click(d) {
  d3.select(".selected").classed("selected", false);
  d3.select(this).classed("selected", true);
  if(d.name == "Hymenophyllum apiculatum" || d.name == "Dicranopteris flexuosa" || d.name == "Dicranopteris flexuosa" || d.name == "Dicranopteris pectinata" || d.name == "Diplopterigium bancroftii"){
    $('#myModal').modal('show');
  }
  //console.log(d3.select(this));
  console.log(d.name);
  if (d.children) {
    d._children = d.children;
    d.children = null;
  } else {
    d.children = d._children;
    d._children = null;
  }
  update(d);
}

function searchNode() {

    //find the node

    var selectedVal = document.getElementById('search2').value;
    var node = svg.selectAll(".node");

    if (selectedVal == "none") {
        node.style("stroke", "white").style("stroke-width", "1");
    } else {
        var selected = node.filter(function (d, i) {
            return d.name != selectedVal;
        });
        selected.style("opacity", "0");
        var link = svg.selectAll(".link")
        link.style("opacity", "0");
        d3.selectAll(".node, .link").transition()
            .duration(5000)
            .style("opacity", 1);     
    }
}

</script>
</div>




